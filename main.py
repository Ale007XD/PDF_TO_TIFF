#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import logging
import os
import subprocess
import uuid
import magic
import filetype
from concurrent.futures import ProcessPoolExecutor
from dotenv import load_dotenv
from pathlib import Path
from aiogram import Bot, Dispatcher, types, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, FSInputFile
from tqdm import tqdm

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
PUBLIC_BASE_URL = os.getenv('PUBLIC_BASE_URL', 'https://localhost')
PUBLISH_DIR = os.getenv('PUBLISH_DIR', '/srv/files')
TMP_DIR = os.getenv('TMP_DIR', '/tmp/bot')
MAX_FILE_MB = int(os.getenv('MAX_FILE_MB', '100'))
IMAGEMAGICK_PATH = os.getenv('IMAGEMAGICK_PATH', '/usr/bin/convert')
ICC_CMYK_PROFILE = os.getenv('ICC_CMYK_PROFILE', '/usr/share/color/icc/CMYK.icc')
CONCURRENCY = int(os.getenv('CONCURRENCY', '2'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
Path(PUBLISH_DIR).mkdir(parents=True, exist_ok=True)
Path(TMP_DIR).mkdir(parents=True, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ü—É–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
executor = ProcessPoolExecutor(max_workers=CONCURRENCY)

def convert_pdf_to_tiff(input_file: str, output_file: str) -> tuple[bool, str]:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç PDF –≤ TIFF –∏—Å–ø–æ–ª—å–∑—É—è ImageMagick
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    """
    try:
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        cmd = [
            IMAGEMAGICK_PATH,
            '-density', '96',
            input_file,
            '-colorspace', 'CMYK',
            '-compress', 'LZW',
            '-units', 'PixelsPerInch',
            '-resample', '96',
            '-strip',
            output_file
        ]
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å ICC –ø—Ä–æ—Ñ–∏–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if os.path.exists(ICC_CMYK_PROFILE):
            cmd.insert(-1, '-profile')
            cmd.insert(-1, ICC_CMYK_PROFILE)
        
        logger.info(f"Executing: {' '.join(cmd)}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        result = subprocess.run(
            cmd,
            check=True,
            timeout=300,
            capture_output=True,
            text=True
        )
        
        if os.path.exists(output_file):
            return True, "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"
        else:
            return False, "–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω"
            
    except subprocess.TimeoutExpired:
        return False, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (5 –º–∏–Ω—É—Ç)"
    except subprocess.CalledProcessError as e:
        return False, f"–û—à–∏–±–∫–∞ ImageMagick: {e.stderr}"
    except Exception as e:
        return False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"

def validate_pdf_file(file_path: str) -> tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª PDF
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ python-magic
        mime_type = magic.from_file(file_path, mime=True)
        if mime_type != 'application/pdf':
            return False, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {mime_type}"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ filetype
        kind = filetype.guess(file_path)
        if kind is None or kind.mime != 'application/pdf':
            return False, "–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è PDF"
            
        return True, "PDF —Ñ–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω"
        
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}"

@dp.message(CommandStart())
async def start_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}!\n\n"
        "üîÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª, –∏ —è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –µ–≥–æ –≤ TIFF:\n"
        "‚Ä¢ –°–∂–∞—Ç–∏–µ: LZW\n"
        "‚Ä¢ –¶–≤–µ—Ç–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: CMYK\n"
        "‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 96 DPI\n\n"
        f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {MAX_FILE_MB} –ú–ë\n"
        "üîó –í –æ—Ç–≤–µ—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ"
    )

@dp.message(Command("help"))
async def help_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        "üÜò <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "üìã <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n"
        "‚Ä¢ –¢–æ–ª—å–∫–æ PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã\n\n"
        "‚öôÔ∏è <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:</b>\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–∞: TIFF\n"
        "‚Ä¢ –°–∂–∞—Ç–∏–µ: LZW\n"
        "‚Ä¢ –¶–≤–µ—Ç–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: CMYK\n"
        "‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 96 DPI\n\n"
        "üìê <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_MB} –ú–ë\n"
        "‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: –¥–æ 5 –º–∏–Ω—É—Ç\n\n"
        "üìÑ <b>–ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–µ PDF:</b>\n"
        "–î–ª—è –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã—Ö PDF —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–π TIFF —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º:\n"
        "<code>–∏—Å—Ö–æ–¥–Ω–æ–µ_–∏–º—è_1.tiff, –∏—Å—Ö–æ–¥–Ω–æ–µ_–∏–º—è_2.tiff</code> –∏ —Ç.–¥.\n\n"
        "üîó <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
        "–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"
    )

@dp.message()
async def document_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
    if not message.document:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç")
        return
    
    document = message.document
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º MIME-—Ç–∏–ø
    if document.mime_type != 'application/pdf':
        await message.answer(
            "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã\n"
            f"–ü–æ–ª—É—á–µ–Ω: {document.mime_type or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø'}"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    file_size_mb = document.file_size / (1024 * 1024)
    if file_size_mb > MAX_FILE_MB:
        await message.answer(
            f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size_mb:.1f} –ú–ë\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_MB} –ú–ë"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    work_id = str(uuid.uuid4())
    work_dir = Path(TMP_DIR) / work_id
    work_dir.mkdir(exist_ok=True)
    
    # –ü—É—Ç–∏ —Ñ–∞–π–ª–æ–≤
    input_file = work_dir / 'input.pdf'
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    base_name = document.file_name.rsplit('.', 1)[0] if document.file_name else 'converted'
    output_filename = f"{base_name}.tiff"
    output_file = work_dir / 'output.tiff'
    final_file = Path(PUBLISH_DIR) / output_filename
    
    try:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        status_msg = await message.answer(
            f"üì• –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª: {document.file_name}\n"
            f"üìä –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} –ú–ë\n"
            "‚è≥ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ..."
        )
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_info = await bot.get_file(document.file_id)
        await bot.download_file(file_info.file_path, input_file)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º PDF
        is_valid, validation_msg = validate_pdf_file(str(input_file))
        if not is_valid:
            await status_msg.edit_text(f"‚ùå {validation_msg}")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await status_msg.edit_text(
            f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω\n"
            "üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ TIFF (CMYK, LZW, 96 DPI)...\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        loop = asyncio.get_event_loop()
        success, error_msg = await loop.run_in_executor(
            executor,
            convert_pdf_to_tiff,
            str(input_file),
            str(output_file)
        )
        
        if not success:
            await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n{error_msg}")
            return
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ –ø—É–±–ª–∏—á–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if output_file.exists():
            output_file.rename(final_file)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            output_size_mb = final_file.stat().st_size / (1024 * 1024)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            download_url = f"{PUBLIC_BASE_URL}/files/{output_filename}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await status_msg.edit_text(
                f"‚úÖ <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                f"üìÅ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {document.file_name}\n"
                f"üìÅ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_filename}\n"
                f"üìä –†–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {output_size_mb:.1f} –ú–ë\n\n"
                f"üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:</b>\n"
                f"<a href='{download_url}'>{output_filename}</a>\n\n"
                f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ"
            )
            
            logger.info(
                f"Successfully converted {document.file_name} -> {output_filename} "
                f"({file_size_mb:.1f}MB -> {output_size_mb:.1f}MB) for user {message.from_user.id}"
            )
        else:
            await status_msg.edit_text("‚ùå –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
    
    except Exception as e:
        logger.error(f"Error processing file for user {message.from_user.id}: {str(e)}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:\n{str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –î—Ä—É–≥–æ–π PDF —Ñ–∞–π–ª\n"
            "‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞\n"
            "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ"
        )
    
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            if work_dir.exists():
                for file in work_dir.rglob('*'):
                    if file.is_file():
                        file.unlink()
                work_dir.rmdir()
        except Exception as e:
            logger.warning(f"Failed to cleanup temp directory {work_dir}: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("Starting PDF‚ÜíTIFF conversion bot...")
    logger.info(f"Publish directory: {PUBLISH_DIR}")
    logger.info(f"Temp directory: {TMP_DIR}")
    logger.info(f"Max file size: {MAX_FILE_MB} MB")
    logger.info(f"Concurrency: {CONCURRENCY}")
    
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Bot crashed: {e}")
    finally:
        await bot.session.close()
        executor.shutdown(wait=True)

if __name__ == "__main__":
    asyncio.run(main())