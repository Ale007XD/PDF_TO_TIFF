 Dockerfile

# Этап 1: Используем официальный образ Python 3.9 в slim-версии
# slim-образы содержат минимальный набор пакетов, необходимый для запуска Python,
# что делает конечный образ меньше по размеру.
FROM python:3.9-slim

# Устанавливаем рабочую директорию внутри контейнера.
# Все последующие команды (COPY, RUN, CMD) будут выполняться из этого каталога.
WORKDIR /app

# Устанавливаем системные зависимости в одном слое для оптимизации.
# - apt-get update: обновляет списки пакетов.
# - apt-get install -y --no-install-recommends: устанавливает пакеты без лишних рекомендаций.
# - imagemagick: основная утилита для работы с изображениями (заменяет ghostscript для конвертации).
# - libmagickwand-dev: библиотеки разработки для ImageMagick (нужны для wand).
# - qpdf: утилита для проверки и "лечения" поврежденных PDF.
# - ghostscript: оставляем для опциональной проверки PDF (можно убрать, если не нужно).
# - && rm -rf /var/lib/apt/lists/*: очищает кэш apt после установки,
# чтобы уменьшить размер финального образа.
RUN apt-get update && apt-get install -y --no-install-recommends \
    imagemagick \
    libmagickwand-dev \
    qpdf \
    ghostscript \
    && rm -rf /var/lib/apt/lists/*

# Копируем файл с Python-зависимостями в рабочую директорию.
# Это делается до копирования основного кода, чтобы использовать кэш Docker.
# Если requirements.txt не меняется, Docker не будет переустанавливать зависимости при каждой сборке.
COPY requirements.txt .

# Устанавливаем Python-зависимости.
# --no-cache-dir: отключает кэширование pip, что также помогает уменьшить размер образа.
RUN pip install --no-cache-dir -r requirements.txt

# Копируем все остальные файлы проекта (bot.py, pdf_to_tiff.py и т.д.)
# из текущей директории в рабочую директорию контейнера (/app).
COPY . .

# Указываем команду по умолчанию для запуска контейнера.
# Изменено с main.py на bot.py, так как основной файл называется bot.py
CMD ["python", "bot.py"]
